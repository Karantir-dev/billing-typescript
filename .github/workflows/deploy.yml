name: Deployment
on:
  push:
    branches: [ prod, dev, prod-biz, update ]

  workflow_dispatch:
    inputs:
      environment:
        required: false
        options:
          - dev
        type: choice
        description: "Яку environment github використовується"
      prefix:
        required: false
        type: string
        description: "Значення типу branch-<number_branch>, де <number_branch> номер гілки. Отримується з 123_added_new_func/devops"
      KUBECONFIG:
        required: false
        type: string
        description: "Kubeconfig in base64"

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read # This is required for actions/checkout


concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true


jobs:
  vars:
    name: Generation vars
    runs-on: ubuntu-latest
    outputs:
      static_version: ${{ steps.basic.outputs.static_version }}

      namespace: ${{ steps.dynamic.outputs.NAMESPACE }}
      prefix: ${{ steps.dynamic.outputs.PREFIX }}
      kubeconfig_version: ${{ steps.dynamic.outputs.KUBECONFIG_VERSION }}
      environment: ${{ steps.dynamic.outputs.environment }}
    steps:
      # Logic
      - name: Set prefix
        env:
          VALUE: ${{ inputs.prefix }}
          DEFAULT: ${{ github.ref_name }}
        id: _tmp_prefix
        run: |
          if [[ -n "$VALUE" ]]; then
            echo "value=${{ env.VALUE }}" >> $GITHUB_OUTPUT
          else
            echo "value=${{ env.DEFAULT }}" >> $GITHUB_OUTPUT
          fi

      - name: Set environments
        env:
          VALUE: ${{ inputs.environment }}
          DEFAULT: ${{ github.ref_name }}
        id: _tmp_environment
        run: |
          if [[ -n "$VALUE" ]]; then
            echo "value=${{ env.VALUE }}" >> $GITHUB_OUTPUT
          else
            echo "value=${{ env.DEFAULT }}" >> $GITHUB_OUTPUT
          fi

      - name: Set environments KUBECONFIG
        env:
          VALUE: ${{ inputs.KUBECONFIG }}
        id: _tmp_KUBECONFIG_VERSION
        run: |
          if [[ -n "$CHECK" ]]; then
            echo "value=$( echo "inputs" )" >> $GITHUB_OUTPUT
          else
            echo "value=$( echo "secrets" )" >> $GITHUB_OUTPUT
          fi

      # Set
      - name: Create dynamic vars
        id: dynamic
        run: |
          echo "NAMESPACE=${{ vars.NAMESPACE_PREFIX }}-${{ steps._tmp_prefix.outputs.value }}" >> "$GITHUB_OUTPUT"
          echo "PREFIX=version-${{ github.run_number }}-${{ steps._tmp_prefix.outputs.value }}" >> "$GITHUB_OUTPUT"
          echo "environment=${{ steps._tmp_environment.outputs.value }}" >> "$GITHUB_OUTPUT"
          
          echo "KUBECONFIG_VERSION=${{ steps._tmp_KUBECONFIG_VERSION.outputs.value }}" >> "$GITHUB_OUTPUT"

      - name: Create basic vars
        id: basic
        run: |
          echo "static_version=$( echo $(date +'%s') )" >> $GITHUB_OUTPUT
  

  test:
    needs: [ vars ]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version:
          - v16.13.1
        npm-version:
          - 8.1.2
        command:
          #          - test
          - lint
    environment:
      name: ${{ needs.vars.outputs.environment }}
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      - run: npm install -g npm@${{ matrix.npm-version }}
      - run: npm install
      - name: Run test
        env:
          REACT_APP_API_URL: ${{ vars.API_URL }}
          REACT_APP_BASE_URL: ${{ vars.BASE_URL }}
          REACT_APP_PROXY_API_URL: ${{ vars.PROXY_API_URL }}
          REACT_APP_TRANSLATION_VERSION: ${{ needs.vars.outputs.static_version }}
          REACT_APP_SITE_URL: ${{ vars.SITE_URL }}
        run: npm run ${{ matrix.command }}
      - name: Send fail start in Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: all
          mention: ${{ vars.STACK_DEVOPS_TRIGGER }}
          channel: 'github-actions'
          if_mention: always
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} # required
        if: failure()

  build_and_push:
    needs: [ vars, test ]
    name: Build and push
    runs-on: ubuntu-latest
    environment:
      name: ${{ needs.vars.outputs.environment }}
    outputs:
      image_tag: ${{ steps.image_tag.outputs.value }}
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3

      - name: Using node 16.13.1
        uses: actions/setup-node@v4
        with:
          node-version: 16.13.1
          cache: 'npm'
      - run: npm install -g npm@8.1.2
      - run: npm install
      - name: Build js
        env:
          REACT_APP_API_URL: ${{ vars.API_URL }}
          REACT_APP_BASE_URL: ${{ vars.BASE_URL }}
          REACT_APP_PROXY_API_URL: ${{ vars.PROXY_API_URL }}
          REACT_APP_TRANSLATION_VERSION: ${{ needs.vars.outputs.static_version }}
          REACT_APP_SITE_URL: ${{ vars.SITE_URL }}
          CI: false
        run: |
          npm run build

      # new auth to aws
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.ROLE_TO_ASSUME }}-${{ vars.APP_NAME }}
          role-session-name: github-actions-${{ vars.APP_NAME }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        env:
          AWS_REGION: ${{ vars.AWS_REGION }}
          ROLE_TO_ASSUME: ${{ vars.ROLE_TO_ASSUME }}-${{ vars.APP_NAME }}

      - name: Create image tag
        id: image_tag
        run: |
          echo "value=${{ steps.login-ecr.outputs.registry }}/${{ vars.APP_NAME }}:${{ needs.vars.outputs.prefix }}-app" >> "$GITHUB_OUTPUT"

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          file: Dockerfile
          push: true
          provenance: false
          target: github
          tags: |
            ${{ steps.image_tag.outputs.value }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Push status
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: all
          mention: ${{ vars.STACK_DEVOPS_TRIGGER }}
          channel: 'github-actions'
          if_mention: always
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: failure()

  deploy_on_server:
    needs: [ vars, build_and_push ]
    name: Deploy version on k8s
    runs-on: ubuntu-latest
    environment:
      name: ${{ needs.vars.outputs.environment }}
    steps:
      - uses: actions/checkout@v4
      - name: Import kubeconfig from secrets
        if: ${{ needs.vars.outputs.kubeconfig_version == 'secrets' }}
        uses: tale/kubectl-action@v1
        with:
          base64-kube-config: ${{ secrets.KUBECONFIG }}
      - name: Import kubeconfig from inputs
        if: ${{ needs.vars.outputs.kubeconfig_version == 'inputs' }}
        uses: tale/kubectl-action@v1
        with:
          base64-kube-config: ${{ inputs.KUBECONFIG }}

      - name: Update Version
        working-directory: deployment
        run: |
          sed -i "s|{{ IMAGE }}|${{ needs.build_and_push.outputs.image_tag }}|g" deployment.yml
          sed -i "s|{{ NAMESPACE }}|${{ needs.vars.outputs.namespace }}|g" deployment.yml

      - name: Check
        working-directory: deployment
        run: cat deployment.yml

      - name: Deploy to DigitalOcean Kubernetes
        working-directory: deployment
        run: kubectl apply -f deployment.yml

      - name: Verify deployment
        working-directory: deployment
        run: kubectl rollout status deployment/bill-deployment -n ${{ needs.vars.outputs.namespace }}

      - name: Clean CloudFlare cache
        run: |
          curl -X POST "${{ vars.CLOUDFLARE_URL }}" \
          -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_TOKEN }}" \
          -H "Content-Type:application/json" \
          --data "{\"purge_everything\":true}"

      - name: Deploy status
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: all
          mention: ${{ vars.STACK_DEVOPS_TRIGGER }}
          channel: 'github-actions'
          if_mention: always
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: failure()
