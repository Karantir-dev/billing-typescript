name: Deployment
on:
  push:
    branches: [ prod, dev ]

  workflow_dispatch:

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read # This is required for actions/checkout


concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  APP_NAME: zomro-bill
  PREFIX: version-${{ github.run_number }}-${{ github.ref_name }}
  NAMESPACE: bill-zomro-com-${{ github.ref_name }}

jobs:
#  jest:
#    runs-on: ubuntu-latest
#    strategy:
#      matrix:
#        node-version: [ v16.13.1 ]
#        npm-version: [ 8.1.2 ]
#    environment:
#      name: ${{ github.ref_name }}
#    steps:
#      - uses: actions/checkout@v4
#      - name: Use Node.js ${{ matrix.node-version }}
#        uses: actions/setup-node@v4
#        with:
#          node-version: ${{ matrix.node-version }}
#          cache: 'npm'
#      - run: npm install -g npm@${{ matrix.npm-version }}
#      - run: npm install -f
#      # Обов'язкові змінні потрібні лише для збірки JS
#      - name: Create core .env
#        uses: SpicyPizza/create-envfile@v1.3
#        with:
#          envkey_REACT_APP_API_URL: ${{ vars.API_URL }}
#          envkey_REACT_APP_BASE_URL: ${{ vars.BASE_URL }}
#
#      - name: Run test
#        run: npm run test
#      - name: Send fail start in Slack
#        uses: 8398a7/action-slack@v3
#        with:
#          status: ${{ job.status }}
#          fields: all
#          mention: ${{ vars.STACK_DEVOPS_TRIGGER }}
#          channel: 'github-actions'
#          if_mention: always
#        env:
#          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} # required
#        # if: failure()

  eslint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [ v16.13.1 ]
        npm-version: [ 8.1.2 ]
    environment:
      name: ${{ github.ref_name }}
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      - run: npm install -g npm@${{ matrix.npm-version }}
      - run: npm install
      - name: Get Static version
        id: static_version
        run: echo "value=$( echo $(date +'%s') )" >> $GITHUB_OUTPUT
      - name: Run List
        env:
          REACT_APP_API_URL: ${{ vars.API_URL }}
          REACT_APP_BASE_URL: ${{ vars.BASE_URL }}
          REACT_APP_PROXY_API_URL: ${{ vars.PROXY_API_URL }}
          REACT_APP_TRANSLATION_VERSION: ${{ steps.static_version.outputs.value }}
          REACT_APP_SITE_URL: ${{ vars.SITE_URL }}
        run: npm run lint

      - name: Send fail start in Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: all
          mention: ${{ vars.STACK_DEVOPS_TRIGGER }}
          channel: 'github-actions'
          if_mention: always
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: failure()

  build_and_push:
    needs: [ eslint ]
    name: Build and push bill docker
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.ref_name }}
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3

      - name: Using node 16.13.1
        uses: actions/setup-node@v4
        with:
          node-version: 16.13.1
          cache: 'npm'
      - run: npm install -g npm@8.1.2
      - run: npm install
      - name: Get Static version
        id: static_version
        run: echo "value=$( echo $(date +'%s') )" >> $GITHUB_OUTPUT
      - name: Build js
        env:
          REACT_APP_API_URL: ${{ vars.API_URL }}
          REACT_APP_BASE_URL: ${{ vars.BASE_URL }}
          REACT_APP_PROXY_API_URL: ${{ vars.PROXY_API_URL }}
          REACT_APP_TRANSLATION_VERSION: ${{ steps.static_version.outputs.value }}
          REACT_APP_SITE_URL: ${{ vars.SITE_URL }}
        run: |
          npm run build

      # new auth to aws
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.ROLE_TO_ASSUME }}
          role-session-name: github-actions-${{ env.APP_NAME }}-${{ github.ref_name }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        env:
          AWS_REGION: ${{ vars.AWS_REGION }}
          ROLE_TO_ASSUME: ${{ vars.ROLE_TO_ASSUME }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          file: Dockerfile
          push: true
          provenance: false
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ env.APP_NAME }}:${{ env.PREFIX }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Push status
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: all
          mention: ${{ vars.STACK_DEVOPS_TRIGGER }}
          channel: 'github-actions'
          if_mention: always
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: failure()

  deploy_on_server:
    needs: [ build_and_push ]
    name: Deploy version on k8s
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.ref_name }}
    steps:
      - uses: actions/checkout@v4
      - name: Import kubeconfig
        uses: tale/kubectl-action@v1
        with:
          base64-kube-config: ${{ secrets.KUBECONFIG }}

      - name: Update Version
        env:
          TMP_IMAGE_PREFIX: ${{ vars.DOCKER_REPOSITORY }}/${{ env.APP_NAME }}:${{ env.PREFIX }}
        working-directory: deployment
        run: |
          sed -i "s|{{ IMAGE }}|${{ env.TMP_IMAGE_PREFIX }}|g" deployment.yml
          sed -i "s|{{ NAMESPACE }}|${{ env.NAMESPACE }}|g" deployment.yml

      - name: Check
        working-directory: deployment
        run: cat deployment.yml

      - name: Deploy to DigitalOcean Kubernetes
        working-directory: deployment
        run: kubectl apply -f deployment.yml

      - name: Verify deployment
        working-directory: deployment
        run: kubectl rollout status deployment/bill-deployment -n ${{ env.NAMESPACE }}

      - name: Clean CloudFlare cache
        run: |
          curl -X POST "${{ vars.CLOUDFLARE_URL }}" \
          -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_TOKEN }}" \
          -H "Content-Type:application/json" \
          --data "{\"purge_everything\":true}"

      - name: Deploy status
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: all
          mention: ${{ vars.STACK_DEVOPS_TRIGGER }}
          channel: 'github-actions'
          if_mention: always
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: failure()
